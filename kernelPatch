@@ -1175,239 +1175,4 @@ void __init tegra_release_bootloader_fb(void)

1175 	1175 	

             tegra_bootloader_fb_size))

1176 	1176 	

       pr_err("Failed to free bootloader fb.\n");

1177 	1177 	

 }

1178 	  	

-#if defined CONFIG_TEGRA_INTERACTIVE_GOV_ON_EARLY_SUSPEND \

1179 	  	

-  || defined CONFIG_TEGRA_CONSERVATIVE_GOV_ON_EARLY_SUSPEND

1180 	  	

-static char cpufreq_gov_default[32];

1181 	  	

-static char saved_boost_factor[32];

1182 	  	

-static char saved_go_maxspeed_load[32];

1183 	  	

-static char saved_max_boost[32];

1184 	  	

-static char saved_sustain_load[32];

1185 	1178 	

 

1186 	  	

-static char saved_up_threshold[32];

1187 	  	

-static char saved_down_threshold[32];

1188 	  	

-static char saved_freq_step[32];

1189 	  	

-

1190 	  	

-

1191 	  	

-void cpufreq_set_governor(char *governor)

1192 	  	

-{

1193 	  	

-  struct file *scaling_gov = NULL;

1194 	  	

-  mm_segment_t old_fs;

1195 	  	

-  char    buf[128];

1196 	  	

-  int i = 0;

1197 	  	

-  loff_t offset = 0;

1198 	  	

-

1199 	  	

-  if (governor == NULL)

1200 	  	

-    return;

1201 	  	

-

1202 	  	

-  /* change to KERNEL_DS address limit */

1203 	  	

-  old_fs = get_fs();

1204 	  	

-  if (!old_fs)

1205 	  	

-  return;

1206 	  	

-  set_fs(KERNEL_DS);

1207 	  	

-#ifndef CONFIG_TEGRA_AUTO_HOTPLUG

1208 	  	

-//  for_each_online_cpu(i)

1209 	  	

-#endif

1210 	  	

-  {

1211 	  	

-    sprintf(buf, CPUFREQ_SYSFS_PLACE_HOLDER, i);

1212 	  	

-    scaling_gov = filp_open(buf, O_RDWR, 0);

1213 	  	

-    if (IS_ERR_OR_NULL(scaling_gov)) {

1214 	  	

-      pr_err("%s. Can't open %s\n", __func__, buf);

1215 	  	

-    } else {

1216 	  	

-      if (scaling_gov->f_op != NULL &&

1217 	  	

-        scaling_gov->f_op->write != NULL)

1218 	  	

-        scaling_gov->f_op->write(scaling_gov,

1219 	  	

-            governor,

1220 	  	

-            strlen(governor),

1221 	  	

-            &offset);

1222 	  	

-      else

1223 	  	

-        pr_err("f_op might be null\n");

1224 	  	

-

1225 	  	

-      filp_close(scaling_gov, NULL);

1226 	  	

-    }

1227 	  	

-  }

1228 	  	

-  set_fs(old_fs);

1229 	  	

-}

1230 	  	

-

1231 	  	

-static void cpufreq_read_governor_param(char *param_path, char *name, char *value)

1232 	  	

-{

1233 	  	

-  struct file *gov_param = NULL;

1234 	  	

-  mm_segment_t old_fs;

1235 	  	

-  static char buf[128];

1236 	  	

-  loff_t offset = 0;

1237 	  	

-

1238 	  	

-  if (!value || !param_path || !name)

1239 	  	

-    return;

1240 	  	

-

1241 	  	

-  /* change to KERNEL_DS address limit */

1242 	  	

-  old_fs = get_fs();

1243 	  	

-  if (!old_fs)

1244 	  	

-    return;

1245 	  	

-  set_fs(KERNEL_DS);

1246 	  	

-

1247 	  	

-  sprintf(buf, CPUFREQ_GOV_PARAM, param_path, name);

1248 	  	

-  gov_param = filp_open(buf, O_RDONLY, 0);

1249 	  	

-  if (gov_param != NULL) {

1250 	  	

-    if (gov_param->f_op != NULL &&

1251 	  	

-      gov_param->f_op->read != NULL)

1252 	  	

-      gov_param->f_op->read(gov_param,

1253 	  	

-          value,

1254 	  	

-          32,

1255 	  	

-          &offset);

1256 	  	

-    else

1257 	  	

-      pr_err("f_op might be null\n");

1258 	  	

-

1259 	  	

-    filp_close(gov_param, NULL);

1260 	  	

-  } else {

1261 	  	

-    pr_err("%s. Can't open %s\n", __func__, buf);

1262 	  	

-  }

1263 	  	

-  set_fs(old_fs);

1264 	  	

-}

1265 	  	

-

1266 	  	

-static void set_governor_param(char *param_path, char *name, char *value)

1267 	  	

-{

1268 	  	

-  struct file *gov_param = NULL;

1269 	  	

-  mm_segment_t old_fs;

1270 	  	

-  static char buf[128];

1271 	  	

-  loff_t offset = 0;

1272 	  	

-

1273 	  	

-  /* change to KERNEL_DS address limit */

1274 	  	

-  old_fs = get_fs();

1275 	  	

-  set_fs(KERNEL_DS);

1276 	  	

-

1277 	  	

-  sprintf(buf, CPUFREQ_GOV_PARAM, param_path, name);

1278 	  	

-  gov_param = filp_open(buf, O_RDWR, 0);

1279 	  	

-  if (gov_param != NULL) {

1280 	  	

-    if (gov_param->f_op != NULL &&

1281 	  	

-      gov_param->f_op->write != NULL)

1282 	  	

-      gov_param->f_op->write(gov_param,

1283 	  	

-          value,

1284 	  	

-          strlen(value),

1285 	  	

-          &offset);

1286 	  	

-    else

1287 	  	

-      pr_err("f_op might be null\n");

1288 	  	

-    

1289 	  	

-    filp_close(gov_param, NULL);

1290 	  	

-  }

1291 	  	

-  set_fs(old_fs);

1292 	  	

-}

1293 	  	

-

1294 	  	

-static void set_sysfs_param(char *param_path, char *name, char *value)

1295 	  	

-{

1296 	  	

-  struct file *gov_param = NULL;

1297 	  	

-  mm_segment_t old_fs;

1298 	  	

-  static char buf[128];

1299 	  	

-  loff_t offset = 0;

1300 	  	

-

1301 	  	

-  /* change to KERNEL_DS address limit */

1302 	  	

-  old_fs = get_fs();

1303 	  	

-  set_fs(KERNEL_DS);

1304 	  	

-

1305 	  	

-  sprintf(buf, "%s%s", param_path, name);

1306 	  	

-  gov_param = filp_open(buf, O_RDWR, 0);

1307 	  	

-  if (gov_param != NULL) {

1308 	  	

-    if (gov_param->f_op != NULL &&

1309 	  	

-      gov_param->f_op->write != NULL)

1310 	  	

-      gov_param->f_op->write(gov_param,

1311 	  	

-          value,

1312 	  	

-          strlen(value),

1313 	  	

-          &offset);

1314 	  	

-    else

1315 	  	

-      pr_err("f_op might be null\n");

1316 	  	

-

1317 	  	

-    filp_close(gov_param, NULL);

1318 	  	

-  }

1319 	  	

-  set_fs(old_fs);

1320 	  	

-}

1321 	  	

-

1322 	  	

-void cpufreq_set_governor_param(char *param_path, char *name, int value)

1323 	  	

-{

1324 	  	

-  char buf[32];

1325 	  	

-  sprintf(buf, "%d", value);

1326 	  	

-  set_governor_param(param_path, name, buf);

1327 	  	

-}

1328 	  	

-

1329 	  	

-

1330 	  	

-void cpufreq_save_governor(void)

1331 	  	

-{

1332 	  	

-  struct file *scaling_gov = NULL;

1333 	  	

-  mm_segment_t old_fs;

1334 	  	

-  char    buf[128];

1335 	  	

-  loff_t offset = 0;

1336 	  	

-

1337 	  	

-  /* change to KERNEL_DS address limit */

1338 	  	

-  old_fs = get_fs();

1339 	  	

-  set_fs(KERNEL_DS);

1340 	  	

-

1341 	  	

-  buf[127] = 0;

1342 	  	

-  sprintf(buf, CPUFREQ_SYSFS_PLACE_HOLDER,0);

1343 	  	

-  scaling_gov = filp_open(buf, O_RDONLY, 0);

1344 	  	

-  if (scaling_gov != NULL) {

1345 	  	

-    if (scaling_gov->f_op != NULL &&

1346 	  	

-      scaling_gov->f_op->read != NULL)

1347 	  	

-      scaling_gov->f_op->read(scaling_gov,

1348 	  	

-          cpufreq_gov_default,

1349 	  	

-          32,

1350 	  	

-          &offset);

1351 	  	

-    else

1352 	  	

-      pr_err("f_op might be null\n");

1353 	  	

-

1354 	  	

-    filp_close(scaling_gov, NULL);

1355 	  	

-  } else {

1356 	  	

-    pr_err("%s. Can't open %s\n", __func__, buf);

1357 	  	

-  }

1358 	  	

-  if (strncmp(cpufreq_gov_default,INTERACTIVE_GOVERNOR,

1359 	  	

-        strlen(INTERACTIVE_GOVERNOR)) == 0) {

1360 	  	

-    cpufreq_read_governor_param(INTERACTIVE_GOVERNOR, BOOST_FACTOR,

1361 	  	

-          saved_boost_factor);

1362 	  	

-    cpufreq_read_governor_param(INTERACTIVE_GOVERNOR, GO_MAXSPEED_LOAD,

1363 	  	

-          saved_go_maxspeed_load);

1364 	  	

-    cpufreq_read_governor_param(INTERACTIVE_GOVERNOR, MAX_BOOST,

1365 	  	

-          saved_max_boost);  

1366 	  	

-    cpufreq_read_governor_param(INTERACTIVE_GOVERNOR, SUSTAIN_LOAD,

1367 	  	

-          saved_sustain_load);

1368 	  	

-  } else if (strncmp(cpufreq_gov_default, CONSERVATIVE_GOVERNOR,

1369 	  	

-        strlen(CONSERVATIVE_GOVERNOR)) == 0) {

1370 	  	

-    cpufreq_read_governor_param(CONSERVATIVE_GOVERNOR, UP_THRESHOLD,

1371 	  	

-          saved_up_threshold);

1372 	  	

-    cpufreq_read_governor_param(CONSERVATIVE_GOVERNOR, DOWN_THRESHOLD,

1373 	  	

-          saved_down_threshold);

1374 	  	

-    cpufreq_read_governor_param(CONSERVATIVE_GOVERNOR, FREQ_STEP,

1375 	  	

-          saved_freq_step);  

1376 	  	

-  } else {

1377 	  	

-  }

1378 	  	

-  set_fs(old_fs);

1379 	  	

-}

1380 	  	

-

1381 	  	

-void cpufreq_restore_governor(void)

1382 	  	

-{

1383 	  	

-  cpufreq_set_governor(cpufreq_gov_default);

1384 	  	

-

1385 	  	

-

1386 	  	

-  if (strncmp(cpufreq_gov_default, "ondemand",

1387 	  	

-        strlen("ondemand")) == 0) {

1388 	  	

-

1389 	  	

-    set_sysfs_param("/sys/devices/system/cpu/cpu0/cpufreq/",

1390 	  	

-        "scaling_max_freq", "1500000");

1391 	  	

-

1392 	  	

-  } else if (strncmp(cpufreq_gov_default,INTERACTIVE_GOVERNOR,

1393 	  	

-        strlen(INTERACTIVE_GOVERNOR)) == 0) {

1394 	  	

-    set_governor_param(INTERACTIVE_GOVERNOR, BOOST_FACTOR,

1395 	  	

-          saved_boost_factor);

1396 	  	

-    set_governor_param(INTERACTIVE_GOVERNOR, GO_MAXSPEED_LOAD,

1397 	  	

-          saved_go_maxspeed_load);

1398 	  	

-    set_governor_param(INTERACTIVE_GOVERNOR, MAX_BOOST,

1399 	  	

-          saved_max_boost);  

1400 	  	

-    set_governor_param(INTERACTIVE_GOVERNOR, SUSTAIN_LOAD,

1401 	  	

-          saved_sustain_load);

1402 	  	

-  } else if (strncmp(cpufreq_gov_default, CONSERVATIVE_GOVERNOR,

1403 	  	

-        strlen(CONSERVATIVE_GOVERNOR)) == 0) {

1404 	  	

-    set_governor_param(CONSERVATIVE_GOVERNOR, UP_THRESHOLD,

1405 	  	

-          saved_up_threshold);

1406 	  	

-    set_governor_param(CONSERVATIVE_GOVERNOR, DOWN_THRESHOLD,

1407 	  	

-          saved_down_threshold);

1408 	  	

-    set_governor_param(CONSERVATIVE_GOVERNOR, FREQ_STEP,

1409 	  	

-          saved_freq_step);  

1410 	  	

-  }

1411 	  	

-}

1412 	  	

-#endif /* TEGRA_CONSERVATIVE_GOV_ON_EARLY_SUSPEND ||

1413 	  	

-    TEGRA_INTERACTIVE_GOV_ON_EARLY_SUSPEND*/
